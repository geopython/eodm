name: build ⚙️

on:
  push:
    branches:
      - main
    tags:
      - '*'
    paths-ignore:
      - '!**.md'
      - 'docs/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '!**.md'
      - 'docs/**'

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        name: Setup Python ${{ matrix.python-version }}
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Setup a virtual environment
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install
      - name: Lint with ruff
        run: poetry run ruff check src
      - name: Check with mypy
        run: poetry run mypy .
      - name: Run tests
        run: poetry run pytest -v --cov=src

  poetry-build-and-publish:
    runs-on: ubuntu-24.04
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2

      - name: Build package
        run: |
          poetry install --no-root
          poetry build

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.POETRY_PYPI_TOKEN_PYPI }}
        run: poetry publish

  docker-build-and-publish-latest:
    runs-on: ubuntu-24.04
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and tag Docker image
        run: |
          docker build -t ghcr.io/${GITHUB_REPOSITORY,,}:latest .
          docker push ghcr.io/${GITHUB_REPOSITORY,,}:latest

  docker-build-and-publish-tag:
    runs-on: ubuntu-24.04
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag or sha
        id: vars
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          IMAGE="ghcr.io/${GITHUB_REPOSITORY,,}:${VERSION}"
          echo "tag=${IMAGE}" >> $GITHUB_OUTPUT

      - name: Build and tag Docker image
        run: docker build -t ${{ steps.vars.outputs.tag }} .

      - name: Push Docker image
        run: docker push ${{ steps.vars.outputs.tag }}
